@using SharedLibrary.DataTransferObjects
@using Microsoft.AspNetCore.Components.Forms
@using RazorLibrary.Helpers
@using System.Net.Http.Json
@using System.Text.Json

<div class="modal fade" id="@ModalId" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="modalTitle">Dictionary</h5>        
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<EditForm Model="@modelDictionary" OnValidSubmit="SaveChanges">
				<div class="modal-body">
					<DataAnnotationsValidator />
					<ValidationSummary />
					<p>
						<label>
							Title:
							<InputText id="title" @bind-Value="@modelDictionary.Title" />
						</label>
					</p>
				</div>

				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
					<button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Save changes</button>
				</div>
			</EditForm>
		</div>
	</div>
</div>
@code
{
	private TermsDictionaryDto modelDictionary = new(0, String.Empty);

	[Parameter]
	[EditorRequired]
	public TermsDictionaryDto? Dictionary { get; set; }

	[Parameter]
	[EditorRequired]
	public string ModalId { get; set; }
	
	[Parameter]
	[EditorRequired]
	public Func<string?, TermsDictionaryDto, JsonSerializerOptions?, CancellationToken, Task<HttpResponseMessage>> SaveChangesHttpMethod { get; set; }

	[Parameter] 
	public EventCallback<ChangesSavedArgs> OnChangesSaved { get; set; }

	protected override void OnParametersSet()
	{
		if (Dictionary != null && modelDictionary != Dictionary)
		{
			modelDictionary = new TermsDictionaryDto(Dictionary.Id, Dictionary.Title);
		}
		base.OnParametersSet();
	}


	private async Task SaveChanges()
	{
		var response = await SaveChangesHttpMethod("TermsDictionary", modelDictionary, null, default);
		if(!response.IsSuccessStatusCode) return;
		
		await OnChangesSaved.InvokeAsync(new ChangesSavedArgs(response, modelDictionary));
	}

	public class ChangesSavedArgs
	{
		public ChangesSavedArgs(HttpResponseMessage response, TermsDictionaryDto dictionary)
		{
			Response = response;
			Dictionary = dictionary;
		}

		public HttpResponseMessage Response { get; private set; }
		public TermsDictionaryDto Dictionary { get; private set; }
	}
}
