@using SharedLibrary.DataTransferObjects
@using Microsoft.AspNetCore.Components.Forms
@using RazorLibrary.Helpers
@using RazorLibrary.Shared.LearningModulesInputs
@inherits EditLearningModule<SharedLibrary.DataTransferObjects.PictureDto>

@if (file == null && FirstEntity != null)
{
	<div class="form-floating mb-3" style="display: inline-block;">
		<img src="@($"{pictureHost}{FirstEntity.Path}")" style="max-height: 250px; max-width: 400px" />
		<button @onclick="DeletePicture" type="button" class="btn btn-danger col-1 fa fa-trash" style="position: absolute;right: 0;top: 0;">
		</button>
	</div>
}

@if (FirstEntity != null)
{
    <PictureInput OnFileInput="OnFileInput" Term="Term"></PictureInput>
}


@code {
    protected override string GetListApiPath => "Pictures/GetList";
	protected override string SaveChangesApiPath => "Pictures";

	private string pictureHost;
    private IBrowserFile? file;

	public override async Task SaveChanges()
	{
	    if (file == null) return;
		
	    var content = new MultipartFormDataContentBuilder()
	        .AddObjectPublicProperties(FirstEntity ?? new PictureDto(0, Term.Id, string.Empty))
	        .AddFile(file, MaxAllowedFileSizeInMb)
	        .Build();

	    if (FirstEntity != null)
	    {
	        await Http.PutAsync(SaveChangesApiPath, content);
	    }
	    else
	    {
	        await Http.PostAsync(SaveChangesApiPath, content); //if picture was deleted
	        await OnInitializationComplete.InvokeAsync(new OnInitializationEventArgs(GetType(), true));
	    }
	}

	protected override Task OnInitializedAsync()
	{
		pictureHost = Http.BaseAddress.AbsoluteUri.TrimEnd('/');
		return base.OnInitializedAsync();
	}

	protected async Task DeletePicture()
	{
		await Http.DeleteAsync($"Pictures?id={FirstEntity!.Id}");
		CurrentEntities = Array.Empty<PictureDto>();

	    await OnInitializationComplete.InvokeAsync(new OnInitializationEventArgs(GetType(), false));
	}

	private void OnFileInput(IBrowserFile browserFile)
    {
		file = browserFile;
    }

    private const int MaxAllowedFileSizeInMb = 10;
}
