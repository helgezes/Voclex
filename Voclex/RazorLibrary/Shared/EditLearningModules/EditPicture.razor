@using SharedLibrary.DataTransferObjects
@using Microsoft.AspNetCore.Components.Forms
@using RazorLibrary.Helpers
@using RazorLibrary.Shared.LearningModulesInputs
@using System.Net
@inherits EditLearningModule<SharedLibrary.DataTransferObjects.PictureDto>

@if ((file == null && suggestionPath == null) && FirstEntity != null)
{
	<div class="form-floating mb-3" style="display: inline-block;">
		<img class="img-thumbnail w-100 voclex-medium-image" src="@($"{pictureHost}{FirstEntity.Path}")" />
		<button @onclick="DeletePicture" type="button" class="btn btn-danger col-1 fa fa-trash" style="position: absolute;right: 0;top: 0;">
		</button>
	</div>
}

@if (FirstEntity != null)
{
    <PictureInput OnFileInput="OnFileInput" OnSuggestionSelected="OnSuggestionSelected" Term="Term"></PictureInput>
}


@code {
    protected override string GetListApiPath => "Pictures/GetList";
	protected override string SaveChangesApiPath => "Pictures";

	private string pictureHost;
    private IBrowserFile? file;
    private string? suggestionPath;

	public override async Task SaveChanges()
	{
	    if (file == null && suggestionPath == null) return;
		
		var editPath = SaveChangesApiPath;

	    var formDataBuilder = new MultipartFormDataContentBuilder()
	        .AddObjectPublicProperties(FirstEntity!);

		if (file != null)
		{
			formDataBuilder.AddFile(file, MaxAllowedFileSizeInMb);
		}
		else
		{
			editPath = $"{editPath}/DownloadAndEdit?pictureUrl={WebUtility.UrlEncode(suggestionPath)}";
		}

		var content = formDataBuilder.Build();
		
		await Http.PutAsync(editPath, content);
	}

	protected override Task OnInitializedAsync()
	{
		pictureHost = Http.BaseAddress.AbsoluteUri.TrimEnd('/');
		return base.OnInitializedAsync();
	}

	protected async Task DeletePicture()
	{
		await Http.DeleteAsync($"Pictures?id={FirstEntity!.Id}");
		CurrentEntities = Array.Empty<PictureDto>();

	    await OnInitializationComplete.InvokeAsync(new OnInitializationEventArgs(GetType(), false));
	}

	private void OnFileInput(IBrowserFile browserFile)
    {
		file = browserFile;
    }

	private void OnSuggestionSelected(string suggestion)
	{
	    suggestionPath = suggestion;
	}

    private const int MaxAllowedFileSizeInMb = 10;
}
