@using RazorLibrary.Helpers
@using SharedLibrary.Services.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop
@using RazorLibrary.Services.Interfaces
@using SharedLibrary.ModelInterfaces.DtoInterfaces
@implements IDisposable
@inject IAuthenticatedUserService AuthenticatedUserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS
@inject IAppStorage Storage

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Voclex</a>
        <AuthorizeView>
            <Authorized>
                <button id="logout_popover" type="button" class="btn btn-primary" data-bs-toggle="popover">
                    <svg xmlns="https://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person" viewBox="0 0 16 16">
                        <path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6Zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0Zm4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4Zm-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10Z"></path>
                    </svg>
                    <span>@currentUser?.Name</span>
                </button>
            </Authorized>
        </AuthorizeView>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<AuthorizeView>
    <Authorized>
        <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
            <nav class="flex-column">
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="oi oi-home" aria-hidden="true"></span> Home
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/learn-new-terms" Match="NavLinkMatch.All">
                        <span class="oi oi-home" aria-hidden="true"></span> Learn New Terms
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/terms-repetition" Match="NavLinkMatch.All">
                        <span class="oi oi-home" aria-hidden="true"></span> Terms Repetition
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/dictionaries" Match="NavLinkMatch.All">
                        <span class="oi oi-home" aria-hidden="true"></span> My Dictionaries
                    </NavLink>
                </div>
            </nav>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/login" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> Login
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/registration" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> Create new account
                </NavLink>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool collapseNavMenu = true;
    private bool initializeLogoutPopover = true;
    private IUserDto? currentUser;
    private IJSObjectReference? jsModule;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChange;

        jsModule = await JS.InvokeAsync<IJSObjectReference>(
            "import", $"./_content/{nameof(RazorLibrary)}/Shared/{nameof(NavMenu)}.razor.js");

        await SetCurrentUser();

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!initializeLogoutPopover || jsModule == null) return;

        initializeLogoutPopover = false;
        await InitializeLogoutPopover();
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChange;
    }

    [JSInvokable]
    public async Task LogOut()
    {
        await Storage.RemoveItem("token");
    }

    private void OnAuthenticationStateChange(Task<AuthenticationState> _)
    {
        initializeLogoutPopover = true;
        SetCurrentUser();
    }

    private async Task InitializeLogoutPopover()
    {
        await jsModule.InvokeVoidAsync("InitializeLogoutPopover", DotNetObjectReference.Create(this));
    }


    private async Task SetCurrentUser()
    {
        currentUser = await AuthenticatedUserService.GetCurrentUser();
        StateHasChanged();
    }
}
