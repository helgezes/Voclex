@page "/terms-repetition"
@using RazorLibrary.Shared.LearningModules
@using RazorLibrary.Shared
@using SharedLibrary.DataTransferObjects.Queries.Terms
@inherits TermsPage

<PageTitle>Terms Repetition</PageTitle>

<div class="container">
    @if (CurrentTerm != null)
    {
        var learningModuleParameters = GetLearningModuleParameters();

        @if (guessingCardLoaded) //so we load some of the already loaded modules from cache todo do we actually need this? maybe remove to reduce complexity
        {
            <div hidden="@(!showTerm)">
                <TermLearningCard CurrentTerm="@CurrentTerm.Value" LearningModuleParameters="learningModuleParameters"></TermLearningCard>
                <p class="d-flex justify-content-around py-3">
                    <button @onclick="CorrectGuess" type="button" class="btn btn-lg voclex-large-button">I got it</button>
                    <button @onclick="IncorrectGuess" type="button" class="btn btn-lg voclex-large-button">Keep showing it</button>
                </p>
            </div>
        }

        <div hidden="@(showTerm)">
            <TermGuessingCard CurrentTerm="CurrentTerm.Value" LearningModuleParameters="learningModuleParameters" OnLoading="OnGuessingModuleLoading" @ref="termGuessingCard"></TermGuessingCard>
            <div class="row py-2">
                <form class="submit-answer @(triesNumber > default(int) ? "is-invalid" : string.Empty)" @onsubmit="TryGuess">
                    <input class="form-control border-primary" @bind="guess" placeholder="Enter your guess">
                    <button type="submit" class="btn submit-button">Submit my answer</button>
                </form>
                <div class="invalid-feedback">
                    Wrong guess! Try again.
                </div>
            </div>
        </div>
    }
    else if (IsLastPage())
    {
        <div>
            <p>No more terms to repeat!</p>
            <p><a href="/learn-new-terms">I would like to learn new terms</a></p>
        </div>
    }
    else
    {
        <LoadingComponent></LoadingComponent>
    }
</div>

@code {
	protected override TermsListEnumQueryVariants QueryVariant => TermsListEnumQueryVariants.GetOnlyForRepetition;
    
	private const int maxTriesNumber = 3;

	private string guess;
	private int triesNumber = default;
	private bool showTerm = false;
    private bool guessingCardLoaded = false;
    private TermGuessingCard? termGuessingCard;

    private void TryGuess()
	{
		if (guess?.ToUpper() == CurrentTerm!.Value.ToUpper())
		{
			showTerm = true;
		}
		else
		{
			triesNumber++;
			if (triesNumber >= maxTriesNumber)
			{
				showTerm = true;
			}
		}

		guess = string.Empty;
	}

	protected override void OnTermSet()
	{
		triesNumber = default;
		showTerm = false;

		termGuessingCard?.ResetToInitialState();
	}

    protected void OnGuessingModuleLoading(OnTermCardLoadingEventArgs args)
    {
        guessingCardLoaded = args.IsLoadingFinished;
    }
}