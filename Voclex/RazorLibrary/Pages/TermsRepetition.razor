@page "/terms-repetition"
@using RazorLibrary.Shared.LearningModules
@using RazorLibrary.Shared
@using SharedLibrary.Queries.Terms
@inherits TermsPage

<PageTitle>Terms Repetition</PageTitle>

<div class="container">
	@if (CurrentTerm != null)
	{
	    <div hidden="@(!showTerm)"> 
            <Term CurrentTerm="@CurrentTerm.Value" LearningModuleParameters="GetLearningModuleParameters()"></Term>
            <p class="d-flex justify-content-around py-3">
                <button @onclick="CorrectGuess" type="button" class="btn btn-lg voclex-large-button">I got it</button>
                <button @onclick="IncorrectGuess" type="button" class="btn btn-lg voclex-large-button">Keep showing it</button>
            </p>
        </div>

	    <div hidden="@(showTerm)">
            @{
                var learningModuleParameters = GetLearningModuleParameters();
            }
            @foreach (var guessingModule in guessingModules)
            {
                <OnDemandComponent InitialState="guessingModule.InitialState" ComponentName="@guessingModule.Name">
                    <DynamicComponent Type="guessingModule.Module" Parameters="learningModuleParameters"></DynamicComponent>
                </OnDemandComponent>
            }
            <div class="row py-2">
                <form class="submit-answer @(triesNumber > default(int) ? "is-invalid" : string.Empty)" @onsubmit="TryGuess">
                    <input class="form-control border-primary" @bind="guess" placeholder="Enter your guess">
                    <button type="submit" class="btn submit-button">Submit my answer</button>
                </form>
                <div class="invalid-feedback">
                    Wrong guess! Try again.
                </div>
            </div>
        </div>
	}
    else if (IsLastPage())
    {
        <div>
            <p>No more terms to repeat!</p>
            <p><a href="/learn-new-terms">I would like to learn new terms</a></p>
        </div>
    }
    else
    {
        <LoadingComponent></LoadingComponent>
    }
</div>

@code {
	protected override TermsListEnumQueryVariants QueryVariant => TermsListEnumQueryVariants.GetOnlyForRepetition;
	
	private readonly GuessingModule[] guessingModules = new[] { //todo
		new GuessingModule(typeof(Definition), OnDemandComponent.ComponentState.OnDemand, "Definition"),
		new GuessingModule(typeof(Pictures), OnDemandComponent.ComponentState.OnDemand, "Picture")
	};
	private const int maxTriesNumber = 3;

	private string guess;
	private int triesNumber = default;
	private bool showTerm = false;

	private void TryGuess()
	{
		if (guess?.ToUpper() == CurrentTerm!.Value.ToUpper())
		{
			showTerm = true;
		}
		else
		{
			triesNumber++;
			if (triesNumber >= maxTriesNumber)
			{
				showTerm = true;
			}
		}

		guess = string.Empty;
	}

	protected override void OnTermSet()
	{
		triesNumber = default;
		showTerm = false;
	}

	public sealed class GuessingModule
	{
		public GuessingModule(Type module, OnDemandComponent.ComponentState initialState, string name)
		{
			Module = module;
			InitialState = initialState;
			Name = name;
		}

		public Type Module { get; init; }
		public OnDemandComponent.ComponentState InitialState { get; init; }
		public string Name { get; init; }
	}
}