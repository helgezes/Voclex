@page "/dictionary/{id:int}"
@inject HttpClient Http
@using RazorLibrary.Helpers
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using SharedLibrary.DataTransferObjects
@using SharedLibrary.Queries.Terms

<PageTitle>Dictionary</PageTitle>

<div class="container">
	<div class="list-group">
		<Virtualize Items="terms" Context="term">
			<ItemContent>
				<div class="py-3 list-group-item d-flex btn btn-outline-info">
					<div class="col-10 text-start">@term.Value</div>
					<a type="button" href="/term/edit/@term.Id" class="btn btn-success col-1 fa fa-pencil" target="_blank">
					</a>
					<button @onclick="() => Delete(term)" type="button" class="btn btn-danger col-1 fa fa-trash">
					</button>
				</div>
			</ItemContent>
		</Virtualize>
		<div class="py-3 btn btn-outline-primary list-group-item">
			<a href="/dictionary/@Id/create-new-term">
				<div class="d-flex justify-content-center">Add new term</div>
			</a>
		</div>
	</div>
</div>

@code {
	[Parameter]
	public int Id { get; set; }

	private readonly List<TermDto> terms = new();

	protected override async Task OnInitializedAsync()
	{
		var queryObject = 
			new TermsListQuery(1, int.MaxValue, //todo load only chunks and cache it somehow. Virtualize ItemsProvider works strangely, mb made a custom one.
			TermsListEnumQueryVariants.GetAll,
			new []{Id});

		var newTerms =
			await Http.GetFromJsonAsync<TermDto[]>(
				"Terms/GetList" + queryObject.ObjectPropertiesToQueryString());

		terms.AddRange(newTerms);
	}

	private async Task Delete(TermDto term)
	{
		await Http.DeleteAsync($"Terms?id={term.Id}");
		terms.Remove(term);
	}
}
