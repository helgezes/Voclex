@page "/term/edit/{id:int}"
@using SharedLibrary.DataTransferObjects
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Json
@using RazorLibrary.Shared
@using RazorLibrary.Shared.EditLearningModules
@inject HttpClient Http

<div class="container">
	<EditForm Model="currentTerm" OnValidSubmit="SaveChanges">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="form-floating mb-3">
			<InputText class="form-control" id="term-value" @bind-Value="@currentTerm.Value"/>
			<label for="term-value">Term</label>
		</div>

		@{ var parameters = GetLearningModuleParameters();}
		@for (var i = 0; i < modules.Length; i++)
		{
			var module = modules[i];
			var i2 = i;
			<DynamicComponent Type="module" @ref="editableLearningModules[i2]" Parameters="parameters"></DynamicComponent>
		}
		<SuccessAlert Text="Changes saved succesfully!" @ref="successAlert"></SuccessAlert>
		<button type="submit" class="btn btn-primary" disabled="@(!saveEnabled)">Save</button>
	</EditForm>
</div>

@code {
	[Parameter]
	public int Id { get; set; }

	private TermDto currentTerm = new(0, string.Empty, 1); //todo dictionary id;

	private readonly Type[] modules = new[] { typeof(EditDefinition) };

	private DynamicComponent[] editableLearningModules;
	private SuccessAlert? successAlert;

	private bool saveEnabled = false;
	private int learningModulesInitializedCount = 0;

	protected override async Task OnInitializedAsync()
	{	//todo mb form as a component, add and edit page separate, using this component
		editableLearningModules = new DynamicComponent[modules.Length];

		TermDto? loadedTerm;
		if (Id != default && (loadedTerm = await Http.GetFromJsonAsync<TermDto>($"Terms?id={Id}")) != null)
			currentTerm = loadedTerm;
				
	}

	private async Task SaveChanges()
	{
		saveEnabled = false;

		await SendChangesToServer();

		saveEnabled = true;

		successAlert!.Show(5000);
	}
	
	private async Task SendChangesToServer()
	{
		var responseTask = Http.PutAsJsonAsync("Terms", currentTerm);

		var modulesSaveChangesTasks = editableLearningModules
			.Select(m => ((IEditableLearningModule)m.Instance).SaveChanges())
			.Append(responseTask)
			.ToArray();

		await Task.WhenAll(modulesSaveChangesTasks);
	}

	private void OnLearningModuleInitialized()
	{
		learningModulesInitializedCount++;
		if(learningModulesInitializedCount < modules.Length) return;

		saveEnabled = true;
	}
	protected IDictionary<string, object> GetLearningModuleParameters()
	{
		return new Dictionary<string, object>
		{
			{ "TermId", Id },
			{ "OnInitializationComplete", EventCallback.Factory.Create(this, OnLearningModuleInitialized) }
		};
	}
}
