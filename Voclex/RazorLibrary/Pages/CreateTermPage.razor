@page "/dictionary/{dictionaryId:int}/create-new-term"
@using SharedLibrary.DataTransferObjects
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Json
@using Microsoft.JSInterop
@using RazorLibrary.Shared.CreateLearningModules
@inject HttpClient Http
@inject IJSRuntime JS

<div class="container">
	<EditForm Model="newTerm" OnValidSubmit="SaveChanges">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="form-floating mb-3">
			<InputText class="form-control" id="term-value" @bind-Value="@newTerm.Value"/>
			<label for="term-value">Term</label>
		</div>
		
		@for (var i = 0; i < modules.Length; i++)
		{
			var module = modules[i];
			var i2 = i;
			<DynamicComponent Type="module" @ref="editableLearningModules[i2]"></DynamicComponent>
		}

		<button type="submit" class="btn btn-success" disabled="@(!saveEnabled)">Save</button>
	</EditForm>
</div>

<!-- Modal -->
<div class="modal fade" id="successfulCreation" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="staticBackdropLabel">Success</h1>
			</div>
			<div class="modal-body">
				New term successfully added!
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" @onclick="() => DisposeModalAndGoToUrl(GoBackToDictionaryUrl)"> Go back to dictionary</button>
				<button type="button" class="btn btn-primary" @onclick="() => DisposeModalAndGoToUrl(ContinueEditingUrl)">Continue editing</button>
			</div>
		</div>
	</div>
</div>

@code {
	[Parameter]
	public int DictionaryId { get; set; }

	private readonly Type[] modules = new[] { typeof(CreateDefinition), typeof(CreateExamples), typeof(CreatePicture) };

	private TermDto newTerm = null!;
	private int newTermId = 0;
	private bool saveEnabled;

	private DynamicComponent[] editableLearningModules;
	private IJSObjectReference jsModule;

	private string GoBackToDictionaryUrl => $"/dictionary/{DictionaryId}";
	private string ContinueEditingUrl => $"/term/edit/{newTermId}";

	protected override void OnInitialized()
	{
		editableLearningModules = new DynamicComponent[modules.Length];
		newTerm = new(0, string.Empty, DictionaryId);
		saveEnabled = true;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if(!firstRender) return;

		jsModule = await JS.InvokeAsync<IJSObjectReference>(
			"import", $"./_content/{nameof(RazorLibrary)}/Pages/{nameof(CreateTermPage)}.razor.js");
				
	}

	private async Task SaveChanges()
	{
		saveEnabled = false;

		var response = await Http.PostAsJsonAsync("Terms", newTerm);
		newTermId = int.Parse(await response.Content.ReadAsStringAsync());

		var modulesSaveChangesTasks = editableLearningModules
			.Select(m => ((ICreatableLearningModule)m.Instance).SaveChanges(newTermId))
			.ToArray();

		await Task.WhenAll(modulesSaveChangesTasks);

		await jsModule.InvokeVoidAsync("ShowSuccessfulCreationModal");
	}

	private async Task DisposeModalAndGoToUrl(string path)
	{
		await jsModule.InvokeVoidAsync("DisposeModalAndGoToUrl", path);
	}
}
