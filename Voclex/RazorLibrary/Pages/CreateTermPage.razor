@page "/dictionary/{dictionaryId:int}/create-new-term"
@using SharedLibrary.DataTransferObjects
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Json
@using RazorLibrary.Shared.CreateLearningModules
@inject HttpClient Http
@inject NavigationManager NavManager

<div class="container">
	<EditForm Model="newTerm" OnValidSubmit="SaveChanges">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="form-floating mb-3">
			<InputText class="form-control" id="term-value" @bind-Value="@newTerm.Value"/>
			<label for="term-value">Term</label>
		</div>
		
		@for (var i = 0; i < modules.Length; i++)
		{
			var module = modules[i];
			var i2 = i;
			<DynamicComponent Type="module" @ref="editableLearningModules[i2]"></DynamicComponent>
		}

		<button type="submit" class="btn btn-primary">Save</button>
	</EditForm>
</div>

@code {
	[Parameter]
	public int DictionaryId { get; set; }

	private readonly Type[] modules = new[] { typeof(CreateDefinition) };

	private TermDto newTerm = null!;

	private DynamicComponent[] editableLearningModules;

	protected override void OnInitialized()
	{
		editableLearningModules = new DynamicComponent[modules.Length];
		newTerm = new(0, string.Empty, DictionaryId);
		base.OnInitialized();
	}

	private async Task SaveChanges()
	{
		var response = await Http.PostAsJsonAsync("Terms", newTerm);
		var termId = int.Parse(await response.Content.ReadAsStringAsync());

		var modulesSaveChangesTasks = editableLearningModules
			.Select(m => ((ICreatableLearningModule)m.Instance).SaveChanges(termId))
			.ToArray();

		await Task.WhenAll(modulesSaveChangesTasks);

		NavManager.NavigateTo($"/term/edit/{termId}");
	}
}
